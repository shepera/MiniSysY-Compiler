#hash(
	(CompUnit . (SEQ FuncDef))
	; Define
	(Decl . (ALT ConstDecl VarDecl))
	(ConstDecl . (SEQ Const BType ConstDef (REPEAT . (SEQ Comma ConstDef )) Semicolon))
	(BType . Int)
	(ConstDef . (SEQ Ident Assign ConstInitVal))
	(ConstInitVal . ConstExp)
	(ConstExp . AddExp)
	(VarDecl . (SEQ BType VarDef (REPEAT . (SEQ Comma VarDef)) Semicolon))
	(VarDef . (SEQ Ident (OPT . (SEQ Assign InitVal))))
	(InitVal . Exp)

	(FuncDef . (SEQ FuncType Ident LPar RPar Block))
	(FuncType . (ALT Int Void))

	;Statement
	(Block . (SEQ LBrace (REPEAT . (ALT Decl Stmt)) RBrace))
	(Stmt . (ALT Ret Block Assign-Stmt Expr-Stmt If-Stmt Empty-Stmt))
	(Assign-Stmt . (SEQ LVal Assign Exp Semicolon))
	(Expr-Stmt . (SEQ Exp Semicolon))
	(If-Stmt . (SEQ If LPar Cond RPar Stmt (OPT . (SEQ Else Stmt))))
	(Ret . (SEQ Return (OPT . Exp) Semicolon))
	(Empty-Stmt . Semicolon)
	(LVal . (SEQ Ident))

	; Expression
	(Exp . AddExp)
	(AddExp . (SEQ  MulExp (REPEAT . (SEQ (ALT Plus Minus) MulExp))))
	(MulExp . (SEQ UnaryExp (REPEAT . (SEQ (ALT Mult Div Mod) UnaryExp))))
	(UnaryExp . (ALT FuncCall PrimaryExp (SEQ UnaryOp UnaryExp)))
	(PrimaryExp . (ALT (SEQ LPar Exp RPar) Number LVal))
	(UnaryOp . (ALT Plus Minus Not)) 

	; condition Expression
	(Cond . LOrExp)
	(LOrExp . (SEQ LAndExp (REPEAT . (SEQ Or LAndExp))))
	(LAndExp . (SEQ EqExp (REPEAT . (SEQ And EqExp))))
	(EqExp . (SEQ RelExp (REPEAT . (SEQ (ALT Equal Ne) RelExp))))
	(RelExp . (SEQ AddExp (REPEAT . (SEQ (ALT Le Ge Lt Gt) AddExp))))

	(FuncCall . (SEQ Ident LPar (OPT . FuncRParams) RPar)) ;;; parameter
	(FuncRParams . (SEQ Exp (REPEAT . (SEQ Comma Exp))))
)

; SEQ 
; OPT : optional  (cons . )
; REPEAT : can repeat 0 or more ( . )
; ALT : could be any one in the list